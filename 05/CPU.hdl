// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=aInstruction);
    Not(in=aInstruction, out=cInstruction);
    Mux16(a=false, b=instruction, sel=cInstruction, out[0]=jump1, out[1]=jump2, out[2]=jump3, out[3]=writeM, out[4]=writeToDRegister, out[6]=AluNo, out[7]=AluF, out[8]=AluNy, out[9]=AluZy, out[10]=AluNx, out[11]=AluZx, out[12]=AorMbit);

    And (a=cInstruction, b=instruction[5], out=destinationA);
    Or (a=destinationA, b=aInstruction, out=loadARegister);
    And(a=cInstruction, b=AorMbit, out=useMbit);
    Mux16(a=instruction, b=aluOutput, sel=cInstruction, out=ARegisterInput);

    ARegister(in=ARegisterInput, load=loadARegister, out=ARegisterOutput, out[0..14]=addressM);
    Mux16(a=ARegisterOutput, b=inM, sel=useMbit, out=AorMOutput);
    DRegister(in=aluOutput, load=writeToDRegister, out=DRegisterOutput);

    ALU(x=DRegisterOutput, y=AorMOutput, zx=AluZx, nx=AluNx, zy=AluZy, ny=AluNy, f=AluF, no=AluNo, out=outM, out=aluOutput, zr=zr, ng=ng);

    And(a=jump3, b=ng, out=isNegative);
    And(a=jump2, b=zr, out=isZero);
    Or(a=zr, b=ng, out=notPositive);
    Not(in=notPositive, out=negateNotPositive);
    And(a=jump1, b=negateNotPositive, out=isPositive);
    Or(a=isZero, b=isPositive, out=or1);
    Or(a=isNegative, b=or1, out=shouldLoad);
    Not(in=shouldLoad, out=shouldInc);
    PC(in=ARegisterOutput, load=shouldLoad, inc=shouldInc, reset=reset, out[0..14]=pc);
}