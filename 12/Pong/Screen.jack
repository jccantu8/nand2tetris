// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean currentColor;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        let currentColor = false;

        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 32767 + 1;

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int screen;

        let screen = 8191;

        while (screen > -1) {
            do Memory.poke(16384 + screen, currentColor);

            let screen = screen - 1;
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let currentColor = b;

        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value;

        let address = 16384 + (32 * y) + (x / 16);
        let value = Memory.peek(address);

        if (currentColor) {
            let value = twoToThe[x - ((x / 16) * 16)] | value;
        } else {
            let value = ~twoToThe[x - ((x / 16) * 16)] & value;
        }
        
        do Memory.poke(address, value);

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx1, dy1, dx2, dy2, a, b, diff;

        let dx1 = x2 - x1;
        let dy1 = y2 - y1;

        let dx2 = Math.abs(x2 - x1);
        let dy2 = Math.abs(y2 - y1);

        if (dx2 = 0) {
            if (dy1 > 0) {
                while (y1 < (y2 + 1)) {
                    do Screen.drawPixel(x1, y1);
                    let y1 = y1 + 1;
                }
            } else {
                while (y2 < (y1 + 1)) {
                    do Screen.drawPixel(x1, y2);
                    let y2 = y2 + 1;
                }
            }

            return;
        }
        if (dy2 = 0) {

            

            if (dx1 > 0) {
                while (x1 < (x2 + 1)) {
                    do Screen.drawPixel(x1, y1);
                    let x1 = x1 + 1;
                }
            } else {
                while (x2 < (x1 + 1)) {
                    do Screen.drawPixel(x2, y1);
                    let x2 = x2 + 1;
                }
            }

            return;
        }


        let a = 0;
        let b = 0;
        let diff = 0;

        while ((a < (dx2 + 1)) & (b < (dy2 + 1))) {
            if ((dx1 > 0) & (dy1 > 0)) {
                do Screen.drawPixel(x1 + a, y1 + b);
            }
            if ((dx1 > 0) & (dy1 < 0)) {
                do Screen.drawPixel(x1 + a, y1 - b);
            }
            if ((dx1 < 0) & (dy1 > 0)) {
                do Screen.drawPixel(x1 - a, y1 + b);
            }
            if ((dx1 < 0) & (dy1 < 0)) {
                do Screen.drawPixel(x1 - a, y1 - b);
            }

            if (diff < 0) {
                let a = a + 1;
                let diff = diff + dy2;
            } else {
                let b = b + 1;
                let diff = diff - dx2;
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while (y1 < (y2 + 1)) {
            do Screen.drawLine(x1, y1, x2, y1);

            let y1 = y1 + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;

        let dy = -r;

        while (dy < (r + 1)) {
            do Screen.drawLine(x - Math.sqrt((r * r) - (dy * dy)), y + dy, x + Math.sqrt((r * r) - (dy * dy)), y + dy);

            let dy = dy + 1;
        }

        return;
    }
}
