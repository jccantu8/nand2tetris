// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram, heap, freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;

        let heap = 2048;
        let freeList = heap;
        let freeList[0] = null;
        let freeList[1] = 14334;

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;

        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        while (true) {
            if (freeList[1] > (size + 1)) {
                let freeList[1] = freeList[1] - size;

                let freeList[freeList + freeList[1] - size - 2] = null; // Set new object's next pointer to null
                let freeList[freeList + freeList[1] - size - 1] = size; // Set new object's size

                return (freeList + freeList[1] - size); // Return base address of new object
            } else {
                let freeList = freeList[0];

                if (freeList[0] = 0) {
                    return 0;
                }
            }
        }

        return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array block;

        let block = freeList;

        while (block[0] > 0) {
            let block = block[0];
        }

        let block[0] = o;

        return;
    }    
}