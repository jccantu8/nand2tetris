// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   Mux16(a=x, b=false, sel=zx, out=j1);
   Mux16(a=y, b=false, sel=zy, out=j2);
   DMux16(in=j1, sel=nx, a=k11, b=k12);
   Not16(in=k12, out=k12not);
   Mux16(a=k11, b=k12not, sel=nx, out=m1);
   DMux16(in=j2, sel=ny, a=k21, b=k22);
   Not16(in=k22, out=k22not);
   Mux16(a=k21, b=k22not, sel=ny, out=m2);
   DMux16(in=m1, sel=f, a=n11, b=n12);
   DMux16(in=m2, sel=f, a=n21, b=n22);
   Add16(a=n22, b=n12, out=o1);
   And16(a=n11, b=n21, out=o2);
   Mux16(a=o2, b=o1, sel=f, out=p2);
   //Inc16(in=p1, out=p2);
   DMux16(in=p2, sel=no, a=q1, b=q2);
   Not16(in=q2, out=q2not);
   Mux16(a=q1, b=q2not, sel=no, out=out, out[15]=ng, out[0..7]=r1, out[8..15]=r2);
   Or8Way(in=r1, out=s1);
   Or8Way(in=r2, out=s2);
   Or(a=s1, b=s1, out=t);
   Not(in=t, out=zr);
}